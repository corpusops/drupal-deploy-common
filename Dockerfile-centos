# syntax=docker/dockerfile:1.3
# To slim down the final size, this image absoutly need to be squashed at the end of the build
# stages:
# - stage base: install & setup layout
# - stage final(base): copy results from build to a ligther image
#
# remember to sync with the bottom ENV & ARGS sections as those are not persisted in multistages
# ( See https://github.com/moby/moby/issues/37345 && https://github.com/moby/moby/issues/37622#issuecomment-412101935 )
# version: 3
ARG \
    APP_GROUP= \
    APP_TYPE=drupal \
    APP_USER= \
    BASE=corpusops/centos-bare:8 \
    BASE_DIR=/code \
    BUILD_DEV= \
    CANONICAL_APT_MIRROR='https://fr.archive.canonical.com/ubuntu/' \
    CFLAGS= \
    CHARSET=UTF-8 \
    C_INCLUDE_PATH=/usr/include/gdal/ \
    COMPOSER_DOWNLOAD_URL=https://getcomposer.org \
    COMPOSER_INSTALLED_FILE=/code/app/.composerinstalled \
    COMPOSER_VERSION=1.10.16 \
    CPLUS_INCLUDE_PATH=/usr/include/gdal/ \
    CPPLAGS= \
    DEBIAN_FRONTEND=noninteractive \
    DEV_DEPENDENCIES_PATTERN='^#\s*dev dependencies' \
    DRUPAL_DOCKERFILE_VERSION=1 \
    DOCS_FOLDERS='docs' \
    GPG_KEYS=B42F6819007F00F88E364FD4036A9C25BF357DD4 \
    GPG_KEYS_SERVERS="hkp://p80.pool.sks-keyservers.net:80 hkp://ipv4.pool.sks-keyservers.net hkp://pgp.mit.edu:80" \
    HOST_USER_UID=1000 \
    LANG=fr_FR.utf8 \
    LANGUAGE=fr_FR \
    LDFLAGS= \
    LOCAL_DIR=/local \
    PHP_GROUP=apache \
    PHP_VER=7.2 \
    PHP_VER_NO_DOT=72 \
    PYTHONUNBUFFERED=1 \
    PY_VER=3.6 \
    TZ=Europe/Paris \
    UBUNTU_APT_MIRROR='https://fr.archive.ubuntu.com/ubuntu/' \
    VSCODE_VERSION= \
    WITH_VSCODE=
ARG \
    APP_GROUP="${APP_GROUP:-$APP_TYPE}" \
    APP_USER="${APP_USER:-$APP_TYPE}" \
    HELPERS=$BASE \
    HISTFILE="${LOCAL_DIR}/.bash_history" \
    IPYTHONDIR="${LOCAL_DIR}/.ipython" \
    MYSQL_HISTFILE="${LOCAL_DIR}/.mysql_history" \
    PATH="$BASE_DIR/sbin:$BASE_DIR/bin:$BASE_DIR/.bin:$BASE_DIR/node_modules/.bin:/cops_helpers:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin" \
    PIPENV_REQ="pipenv>=${MINIMUM_PIP_VERSION}" \
    PSQL_HISTORY="${LOCAL_DIR}/.psql_history" \
    STRIP_HELPERS="forego confd remco"
#

FROM $HELPERS AS helpers
FROM $BASE AS base
USER root
# inherit all global args (think to sync this block with runner stage)
ARG \
    APP_GROUP APP_TYPE APP_USER BASE BASE_DIR BUILD_DEV CANONICAL_APT_MIRROR CFLAGS \
    CHARSET C_INCLUDE_PATH COMPOSER_DOWNLOAD_URL COMPOSER_INSTALLED_FILE COMPOSER_VERSION \
    CPLUS_INCLUDE_PATH CPPLAGS DEBIAN_FRONTEND DEV_DEPENDENCIES_PATTERN DOCS_FOLDERS \
    DRUPAL_D GPG_KEYS_SERVERS HELPERS HISTFILE \
    HOST_USER_UID IPYTHONDIR LANG LANGUAGE LDFLAGS LOCAL_DIR MYSQL_HISTFILE PATH PHP_GROUP \
    PHP_VER PHP_VER_NO_DOT PIPENV_REQ PSQL_HISTORY PYTHONUNBUFFERED PY_VER STRIP_HELPERS \
    TZ UBUNTU_APT_MIRROR VSCODE_VERSION WITH_VSCODE
ENV \
    APP_TYPE="$APP_TYPE" \
    APP_GROUP="${APP_GROUP}" \
    APP_USER="${APP_USER}" \
    BASE_DIR="$BASE_DIR" \
    BUILD_DEV="$BUILD_DEV" \
    CFLAGS="$CFLAGS" \
    C_INCLUDE_PATH="$C_INCLUDE_PATH" \
    COMPOSER_INSTALLED_FILE="${COMPOSER_INSTALLED_FILE}" \
    COMPOSER_VERSION="$COMPOSER_VERSION" \
    CPLUS_INCLUDE_PATH="$CPLUS_INCLUDE_PATH" \
    CPPLAGS="$CPPFLAGS" \
    DEBIAN_FRONTEND="$DEBIAN_FRONTEND" \
    DRUPAL_DOCKERFILE_VERSION="${DRUPAL_DOCKERFILE_VERSION}" \
    HISTFILE="$HISTFILE" \
    IPYTHONDIR="$IPYTHONDIR" \
    LANG="$LANG" \
    LC_ALL="$LANG" \
    LDFLAGS="$LDFLAGS" \
    LOCAL_DIR="$LOCAL_DIR" \
    MYSQL_HISTFILE="$MYSQL_HISTFILE" \
    PHP_GROUP="${PHP_GROUP}" \
    PHP_VER="$PHP_VER" \
    PHP_VER_NO_DOT="$PHP_VER_NO_DOT" \
    PATH="$PATH" \
    PSQL_HISTORY="$PSQL_HISTORY" \
    PYTHONUNBUFFERED="$PYTHONUNBUFFERED" \
    PY_VER="$PY_VER" \
    TZ="$TZ" \
    VSCODE_VERSION="$VSCODE_VERSION" \
    WITH_VSCODE="$WITH_VSCODE"
WORKDIR $BASE_DIR
USER root
ADD yum.txt ./
RUN \
    --mount=type=cache,id=cops${BASE}dnf,target=/var/cache/dnf \
    --mount=type=cache,id=cops${BASE}yum,target=/var/cache/yum \
    bash -c 'set -exo pipefail \
    \
    && : "install packages" \
    && sed -i -re "s/(php-?)[0-9]\.[0-9]+/\1$PHP_VER/g" yum.txt \
    && yum -y update \
    && yum -y install epel-release \
    && if [ ! -e /etc/yum.repos.d/remi.repo ];then  yum -y install http://rpms.remirepo.net/enterprise/remi-release-7.rpm;fi \
    && if [ ! -e /etc/yum.repos.d/pgdg-redhat-all.repo ];then yum -y install -y https://download.postgresql.org/pub/repos/yum/reporpms/EL-7-x86_64/pgdg-redhat-repo-latest.noarch.rpm;fi \
    && yum install -y yum-utils yum-priorities \
    && yum -y update \
    && yum-config-manager --enable remi-php${PHP_VER_NO_DOT} \
    && yum -y install $(sed -re "/$DEV_DEPENDENCIES_PATTERN/,$ d" yum.txt|grep -vE "^\s*#"|tr "\n" " " ) \
    && yum clean all \
    && : "$(date) end" \
    '

RUN \
    --mount=type=bind,from=helpers,target=/s \
    bash -c 'set -exo pipefail \
    \
    && : "remove default php-fpm pool"\
    && find $(ls -1d /etc/php*fpm* /etc/php*/*fpm* /etc/php*/*/*fpm*  2>/dev/null || true) /bin -type f -name www.conf -print -delete\
    \
    && : "on debian based systems, link pool definitions" \
    && (ls -1d /etc/php*/*/*fpm*/pool.d 2>/dev/null||true)|while read p;do rm -rf "$p";ln -sfv /etc/php-fpm.d $p;done\
    \
    && : "install composer"\
    && if (echo $COMPOSER_VERSION|grep -E -vq "\." );then u="$COMPOSER_DOWNLOAD_URL/composer-${COMPOSER_VERSION}.phar";\
       else u="$COMPOSER_DOWNLOAD_URL/download/${COMPOSER_VERSION}/composer.phar";fi\
    && curl -sS "$u" -o /usr/local/bin/composer \
    && chmod +x /usr/local/bin/composer \
    && /usr/local/bin/composer --version  \
    \
    && : "make shortcut links for php"\
    && for i in php-fpm php;do if [ -e /usr/local/bin/$i ];then rm -f /usr/local/bin/$i;fi;p=$(which ${i}${PHP_VER}||true);if [ "x$p" = "x" ];then p=$(which ${i});fi;ln -sfv $p /usr/local/bin/${i};done \
    \
    && : "$(date): setup project user & workdir, and ~/ssh"\
    && for g in $APP_GROUP $PHP_GROUP;do if !( getent group ${g} &>/dev/null );then groupadd ${g};fi;done \
    && if !( getent passwd ${APP_USER} &>/dev/null );then useradd -g ${APP_GROUP} -ms /bin/bash ${APP_USER} --uid ${HOST_USER_UID} --home-dir /home/${APP_USER};fi \
    && ( usermod -a -G $PHP_GROUP $APP_USER || true ) \
    && if [ ! -e /home/${APP_USER}/.ssh ];then mkdir /home/${APP_USER}/.ssh;fi \
    && if [ ! -e $LOCAL_DIR ];then mkdir -p $LOCAL_DIR;fi \
    && chown ${APP_USER}:${APP_GROUP} $LOCAL_DIR /home/${APP_USER}/.ssh /home/${APP_USER} . \
    && while read f;do chown $APP_USER:$PHP_GROUP "$f";done < \
        <(find . \
          \( -type d -or -type f \) -not \( -user $APP_USER -or -group $PHP_GROUP \)  2>/dev/null|sort) \
    && chmod 2755 . \
    \
    && : "$(date): inject corpusops helpers"\
    && for i in /cops_helpers/ /etc/supervisor.d/ /etc/rsyslog.d/ /etc/rsyslog.conf /etc/rsyslog.conf.frep /etc/cron.d/ /etc/logrotate.d/;do \
        if [ -e /s$i ] || [ -h /s$i ];then rsync -aAH --numeric-ids /s${i} ${i};fi\
        && cd /cops_helpers && rm -rfv $STRIP_HELPERS;\
    done \
    && : "$(date): set locale" \
    && export INSTALL_LOCALES="${LANG}" INSTALL_DEFAULT_LOCALE="${LANG}" \
    && if (command -v setup_locales.sh);then setup_locales.sh; \
       else localedef -i ${LANGUAGE} -c -f ${CHARSET} -A /usr/share/locale/locale.alias ${LANGUAGE}.${CHARSET};\
       fi\
    \
    && : "$(date): setup project timezone"\
    && ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone \
    && : "$(date) end"'


FROM base AS appsetup
# inherit all global args (think to sync this block with runner stage)
ARG \
    APP_GROUP APP_TYPE APP_USER BASE BASE_DIR BUILD_DEV CANONICAL_APT_MIRROR CFLAGS \
    CHARSET C_INCLUDE_PATH COMPOSER_DOWNLOAD_URL COMPOSER_INSTALLED_FILE COMPOSER_VERSION \
    CPLUS_INCLUDE_PATH CPPLAGS DEBIAN_FRONTEND DEV_DEPENDENCIES_PATTERN DOCS_FOLDERS \
    DRUPAL_D GPG_KEYS_SERVERS HELPERS HISTFILE \
    HOST_USER_UID IPYTHONDIR LANG LANGUAGE LDFLAGS LOCAL_DIR MYSQL_HISTFILE PATH PHP_GROUP \
    PHP_VER PHP_VER_NO_DOT PIPENV_REQ PSQL_HISTORY PYTHONUNBUFFERED PY_VER STRIP_HELPERS \
    TZ UBUNTU_APT_MIRROR VSCODE_VERSION WITH_VSCODE
RUN \
    --mount=type=cache,id=cops${BASE}apt,target=/var/cache/apt \
    --mount=type=cache,id=cops${BASE}list,target=/var/lib/apt/lists \
    bash -c 'set -exo pipefail \
    && : "$(date)install dev packages"\
    && yum -y update \
    && yum-config-manager --enable remi-php${PHP_VER_NO_DOT} \
    && yum -y install $(cat yum.txt|grep -vE "^\s*#"|tr "\n" " " ) \
    && yum clean all \
    && : "$(date) end"  \
    '

# Handle images refresh (rebuild from BASE_IMAGE where BASE_IMAGE is an older version of this image)
RUN for i in keys/* $DOCS_FOLDERS init sys local/${APP_TYPE}-deploy-common/ .git app sys sbin sys/sbin \
    ;do if ! ( echo "$i" | grep -Eq "(apt|apk|yum).txt|pip_reqs.txt" );then ( rm -vrf $i || true );fi;done

ADD --chown=${APP_USER}:${PHP_GROUP} keys/*                           /home/${APP_USER}/.ssh/
ADD --chown=${APP_USER}:${PHP_GROUP} sys/sbin                         ./sbin
ADD --chown=${APP_USER}:${PHP_GROUP} sys                              ./sys
ADD --chown=${APP_USER}:${PHP_GROUP} local/${APP_TYPE}-deploy-common/ ./local/${APP_TYPE}-deploy-common/
# only bring minimal app for now as we get only deps (CI optims)
ADD --chown=${APP_USER}:${PHP_GROUP} app                              ./app
RUN bash -c 'set -exo pipefail \
    && : "$(date): middletime fixperms" \
    && find $BASE_DIR -not -user ${APP_TYPE} | while read f;do chown ${APP_TYPE}:${PHP_GROUP} "$f";done  \
    && : "$(date) end"'

# We make an intermediary init folder to allow to have the
#
# entrypoint mounted as a volume in dev
# cp -frnv => keeps existing stuff, add new stuff, this allows for existing files in project
# overriding the common stuff
# common -> sys
# sys -> init
# ==> init contains files from both local sys and common, common cannot override content from local sys
FROM appsetup AS final
# inherit all global args (think to sync this block with runner stage)
ARG \
    APP_GROUP APP_TYPE APP_USER BASE BASE_DIR BUILD_DEV CANONICAL_APT_MIRROR CFLAGS \
    CHARSET C_INCLUDE_PATH COMPOSER_DOWNLOAD_URL COMPOSER_INSTALLED_FILE COMPOSER_VERSION \
    CPLUS_INCLUDE_PATH CPPLAGS DEBIAN_FRONTEND DEV_DEPENDENCIES_PATTERN DOCS_FOLDERS \
    DRUPAL_D GPG_KEYS_SERVERS HELPERS HISTFILE \
    HOST_USER_UID IPYTHONDIR LANG LANGUAGE LDFLAGS LOCAL_DIR MYSQL_HISTFILE PATH PHP_GROUP \
    PHP_VER PHP_VER_NO_DOT PIPENV_REQ PSQL_HISTORY PYTHONUNBUFFERED PY_VER STRIP_HELPERS

ADD --chown=${APP_TYPE}:${APP_TYPE} sys                          $BASE_DIR/sys
ADD --chown=${APP_TYPE}:${APP_TYPE} local/${APP_TYPE}-deploy-common/  $BASE_DIR/local/${APP_TYPE}-deploy-common/
ADD --chown=${APP_TYPE}:${APP_TYPE} $DOCS_FOLDERS                $BASE_DIR/docs/

RUN bash -c 'set -exo pipefail \
    && : "inject any SSH config & configure ssh client" \
    && for i in keys sys/ssh;do if [ -e $i ];then cp -rfv $i/. /home/${APP_USER}/.ssh;fi;done \
    && chmod -R 0700 /home/${APP_USER}/.ssh \
    && find /home/${APP_USER}/.ssh -type f               | while read f;do chmod 0600 "$f";done \
    && find /home/${APP_USER}/.ssh -type f -name "*.pub" | while read f;do chmod 0644 "$f";done \
    && chown -R ${APP_USER}:${PHP_GROUP} /home/${APP_USER}/.ssh \
    \
    && : "$(date) end"'

USER root
RUN bash -c 'set -exo pipefail \
    && : "create layout" \
    && mkdir -vp sys init local/${APP_TYPE}-deploy-common/sys \
    sbin app/bin app/drush app/lib app/scripts app/src app/www app/var \
    app/www/sites app/www/sites/default \
    app/var/public app/var/private app/var/tmp app/var/cache app/var/nginxwebroot \
    && : "if we found a static dist inside the sys directory, it has been injected during" \
    && : "the CI process, we just unpack it" \
    && if [ -e sys/statics ];then : "unpack" \
        && while read f;do tar xf  ${f};done < <(find sys/statics -name "*.tar") \
        && while read f;do tar xJf ${f};done < <(find sys/statics -name "*.txz"  -or -name "*.xz") \
        && while read f;do tar xjf ${f};done < <(find sys/statics -name "*.tbz2" -or -name "*.bz2") \
        && while read f;do tar xzf ${f};done < <(find sys/statics -name "*.tgz"  -or -name "*.gz") \
        && rm -rfv sys/statics;\
    fi \
    && : "assemble init" \
    && for i in init.sh etc sbin scripts;do for j in local/${APP_TYPE}-deploy-common/sys sys;do if [ -e $j/$i ];then cp -frv $j/$i init;fi;done;done \
    \
    && : "connect init.sh" \
    && ln -sf $(pwd)/init/init.sh /init.sh \
    \
    && : "generate a default app.env from the app/.env.dist.frep" \
    && frep "app/.env.dist.frep:app/.env" --overwrite \
    \
    && : "run composer install with --no-scripts switch is to avoid the drupal cache clear." \
    && : "Indeed this one requires a working database" \
    && nodev='' && if  [ "x${BUILD_DEV}" != "xy" ];then nodev="--no-dev";fi \
    && cd app && gosu ${APP_USER} ../init/sbin/composerinstall.sh ${nodev} --no-scripts && touch "${COMPOSER_INSTALLED_FILE}" && cd -\
    \
    && : "final cleanup" \
    && ( rm -rvf /root/.cache/composer /home/*/.cache/composer || true ) \
    && : "latest fixperm" \
    && find -not -user ${APP_USER} | while read f;do chown ${APP_USER}:${PHP_GROUP} "$f";done \
    && find sys/etc/cron.d -type f | while read f;do chmod -vf 0644 "$f";done \
    && : "$(date) end"'

WORKDIR $BASE_DIR

ARG DBSETUP_SH=https://raw.githubusercontent.com/corpusops/docker-images/master/rootfs/bin/project_dbsetup.sh
ADD --chmod=755 $DBSETUP_SH $BASE_DIR/bin/

ADD --chown=${APP_TYPE}:${APP_TYPE} .git                         $BASE_DIR/.git
CMD "/init.sh"

FROM base AS runner
# inherit all global args (think to sync this block with runner stage)
ARG \
    APP_GROUP APP_TYPE APP_USER BASE BASE_DIR BUILD_DEV CANONICAL_APT_MIRROR CFLAGS \
    CHARSET C_INCLUDE_PATH COMPOSER_DOWNLOAD_URL COMPOSER_INSTALLED_FILE COMPOSER_VERSION \
    CPLUS_INCLUDE_PATH CPPLAGS DEBIAN_FRONTEND DEV_DEPENDENCIES_PATTERN DOCS_FOLDERS \
    DRUPAL_D GPG_KEYS_SERVERS HELPERS HISTFILE \
    HOST_USER_UID IPYTHONDIR LANG LANGUAGE LDFLAGS LOCAL_DIR MYSQL_HISTFILE PATH PHP_GROUP \
    PHP_VER PHP_VER_NO_DOT PIPENV_REQ PSQL_HISTORY PYTHONUNBUFFERED PY_VER STRIP_HELPERS
ENV \
    APP_TYPE="$APP_TYPE" \
    APP_GROUP="${APP_GROUP}" \
    APP_USER="${APP_USER}" \
    BASE_DIR="$BASE_DIR" \
    BUILD_DEV="$BUILD_DEV" \
    CFLAGS="$CFLAGS" \
    C_INCLUDE_PATH="$C_INCLUDE_PATH" \
    COMPOSER_INSTALLED_FILE="${COMPOSER_INSTALLED_FILE}" \
    COMPOSER_VERSION="$COMPOSER_VERSION" \
    CPLUS_INCLUDE_PATH="$CPLUS_INCLUDE_PATH" \
    CPPLAGS="$CPPFLAGS" \
    DEBIAN_FRONTEND="$DEBIAN_FRONTEND" \
    DRUPAL_DOCKERFILE_VERSION="${DRUPAL_DOCKERFILE_VERSION}" \
    HISTFILE="$HISTFILE" \
    IPYTHONDIR="$IPYTHONDIR" \
    LANG="$LANG" \
    LC_ALL="$LANG" \
    LDFLAGS="$LDFLAGS" \
    LOCAL_DIR="$LOCAL_DIR" \
    MYSQL_HISTFILE="$MYSQL_HISTFILE" \
    PHP_GROUP="${PHP_GROUP}" \
    PHP_VER="$PHP_VER" \
    PHP_VER_NO_DOT="$PHP_VER_NO_DOT" \
    PATH="$PATH" \
    PSQL_HISTORY="$PSQL_HISTORY" \
    PYTHONUNBUFFERED="$PYTHONUNBUFFERED" \
    PY_VER="$PY_VER" \
    TZ="$TZ" \
    VSCODE_VERSION="$VSCODE_VERSION" \
    WITH_VSCODE="$WITH_VSCODE"
RUN --mount=type=bind,from=final,target=/s \
    for i in /init.sh /home/ $BASE_DIR/ \
             /cops_helpers/ /etc/supervisor.d/ /etc/rsyslog.d/ /etc/rsyslog.conf /etc/rsyslog.conf.frep /etc/cron.d/ /etc/logrotate.d/ \
    ;do if [ -e /s${i} ] || [ -h /s${i} ];then rsync -aAH --numeric-ids /s${i} ${i};fi;done \
    && : "Fix crond & pam error in RedHat --FAILED to open PAM security session (Cannot make/remove an entry for the specified session)--" \
    && : '########### sed -i "/session    required   pam_loginuid.so/c\#session    required   pam_loginuid.so" /etc/pam.d/crond ' 
WORKDIR $BASE_DIR/app
ADD --chown=${APP_TYPE}:${APP_TYPE} .git                         $BASE_DIR/.git
# image will drop privileges itself using gosu at the end of the entrypoint
CMD "/init.sh"
